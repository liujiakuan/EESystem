<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
		
		<!-- 注解可以单独配置Handler，也可以像下面这样扫描 -->
		<context:component-scan base-package="ees.controller"></context:component-scan>
		
		<!-- 非注解配置 -->
		<!-- 配置Handler 
		<bean id="Controller2" name="/test.action" class="ljk.controller.Controller1" />
		<bean id="Controller1"  class="ljk.controller.Controller1" />-->
		<!-- 处理器映射器 -->
		<!-- <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" /> -->
		<!-- 方法2 
		<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<props>
				 对itemsController1进行url映射，url是/queryItems1.action
				<prop key="/queryItems1.action">Controller1</prop>
				<prop key="/queryItems2.action">Controller1</prop>
				<prop key="/queryItems3.action">Controller1</prop>
			</props>
		</property>
		</bean>-->
		<!-- 处理器适配器 -->
		<!-- <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" /> -->
		<!-- 方法2 
		<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"/>-->
		
		<!-- 注解配置 -->
		<!--注解映射器
		<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/> -->
		<!--注解适配器 
		<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>-->
		<!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置
		mvc:annotation-driven默认加载很多的参数绑定方法，
		比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
		实际开发时使用mvc:annotation-driven
		这个默认还加载了很多的参数的绑定方法
		validator:注入校验器到适配器
		<mvc:annotation-driven conversion-service="conversionService"
		validator="validator"></mvc:annotation-driven>-->
		<mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>
		<!-- 这个好像要自动注入 -->
		
		
		<!-- 视图解析器 -->
		<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置jsp路径的前缀-->
		<property name="prefix" value="/jsp/"/><!-- /WEF-info/jsp/ -->
		<!-- 配置jsp路径的后缀-->
		<property name="suffix" value=".jsp"/>
		</bean>
		
		<!-- 自定义参数绑定 --><!-- 这里总是报错，先屏蔽，以后解决 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<!-- 转换器 -->
		<property name="converters">
			<list>
				<!-- 日期类型转换,还有可能写很多类型的转换，比如字符串去前后空格 
				<bean class="ees.controller.converter.DateConverter"/>-->
			</list>
		</property>
	</bean>
	
	<!-- 配置validator -->
	<!-- 校验器 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- 校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 指定校验使用的资源文件，如果不指定则默认使用classpath下的ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名 -->
		<property name="basenames">
			<list>
				<value>classpath:CustomValidationMessages</value>
			</list>
		</property>
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8" />
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120" />
	</bean>
	
	<!-- 配置文件上传解析器 --><!-- 如果表单的类型enctype="multipart/form-data"一定要有如下配置，否则参数绑定会失败  -->
	<bean id="multipartResolver"
	class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
	>
		<!-- 设置文件上传的最大尺寸为,5M -->
		<property name="maxUploadSize">
			<value>5242880</value>
		</property>
	</bean>
	
</beans>