<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ees.mapper.ManagerMapper" >
	<!--员工以及员工紧急联系人ResultMap映射配置-->
	<resultMap type="ees.po.EmployeePo" id="Employee_ResultMap">
		<id column="es_employee_id" property="es_employee_id" />
		<result column="es_employee_name" property="es_employee_name" />
		<result column="es_employee_age" property="es_employee_age" />
		<result column="es_employee_sex" property="es_employee_sex" />
		<result column="es_employee_img" property="es_employee_img" />
		<result column="es_employee_idcard" property="es_employee_idcard" />
		<result column="es_employee_marriage" property="es_employee_marriage" />
		<result column="es_employee_qualification" property="es_employee_qualification" />
		<result column="es_employee_school" property="es_employee_school" />
		<result column="es_employee_major" property="es_employee_major" />
		<result column="es_employee_department" property="es_employee_department" />
		<result column="es_employee_post" property="es_employee_post" />
		<result column="es_employee_entry" property="es_employee_entry" />
		<result column="es_employee_call" property="es_employee_call" />
		<result column="es_employee_mail" property="es_employee_mail" />
		<result column="es_employee_bankcard" property="es_employee_bankcard" />
		<result column="es_employee_labourcard" property="es_employee_labourcard" />
		<result column="es_employee_pafcard" property="es_employee_pafcard" />
		<result column="es_employee_pod" property="es_employee_pod" />
		<result column="es_employee_domicile" property="es_employee_domicile" />
		<result column="es_employee_motto" property="es_employee_motto" />
		<result column="es_employee_aim" property="es_employee_aim" />
		<result column="es_employee_qq" property="es_employee_qq" />
		<result column="es_employee_wechat" property="es_employee_wechat" />
		<result column="es_employee_hobby" property="es_employee_hobby" />
		<result column="es_employee_count" property="es_employee_count" />
		<result column="es_employee_password" property="es_employee_password" />
		<collection property="contactsPoList" ofType="ees.po.ContactsPo">
			<id column="es_employee_contacts_id" property="es_employee_contacts_id" />
			<result column="es_employee_contacts_name" property="es_employee_contacts_name" />
			<result column="es_employee_contacts_relation" property="es_employee_contacts_relation" />
			<result column="es_employee_contacts_call" property="es_employee_contacts_call" />
			<result column="es_employee_id" property="es_employee_id" />
		</collection>
		<collection property="feedbackPoList" ofType="ees.po.FeedbackPo">
			<id column="es_employee_feedback_id" property="es_employee_feedback_id" />
			<result column="es_employee_feedback_content" property="es_employee_feedback_content" />
			<result column="es_employee_feedback_date" property="es_employee_feedback_date" />
			<result column="es_employee_feedback_state" property="es_employee_feedback_state" />
			<result column="es_employee_id" property="es_employee_id" />
		</collection>
	</resultMap>
 	<!--管理员登录判断，判断管理员是否存在-->
 	<select id="checkManager" parameterType="String" resultType="ManagerPo">
 		select * from es_manager_login where es_manager_login_count=#{es_manager_login_count} and 
 		es_manager_login_password=#{es_manager_login_password}
 	</select>
 	<!--管理员登录状态值，判断管理员登录状态,离线状态才能登录-->
 	<select id="checkManagerState" parameterType="String" resultType="int">
 		select es_manager_login_state from es_manager_login where es_manager_login_count=#{es_manager_login_count} and 
 		es_manager_login_password=#{es_manager_login_password}
 	</select>
 	<!--修改管理员在线状态，登陆后将管理员的状态设置为在线状态，退出后将管理员设置为离线-->
 	<update id="updateManagerState" parameterType="ManagerPo">
 		update es_manager_login set es_manager_login_state=#{es_manager_login_state} where es_manager_login_count=#{es_manager_login_count} and 
 		es_manager_login_password=#{es_manager_login_password}
 	</update>
 	 <!--修改管理员在线状态，登陆后将管理员的状态设置为在线状态，退出后将管理员设置为离线-->
 	<update id="updateManagerStateLogOut" parameterType="String">
 		update es_manager_login set es_manager_login_state=0 where es_manager_login_count=#{es_manager_login_count} 
 	</update>
 	<!--添加管理员-->
 	<insert id="addManager" parameterType="ManagerPo">
 		insert into es_manager_login(es_manager_login_count,es_manager_login_password)
 		 values(#{es_manager_login_count},#{es_manager_login_password})
 	</insert>
 	<!--返回所有管理员，管理员列表页展示-->
 	<select id="getAllManager" resultType="ManagerPo">
 		select * from es_manager_login
 	</select>
 	<!--管理员添加员工-->
 	<insert id="managerAddEmployee" parameterType="EmployeePo" useGeneratedKeys="true" keyProperty="es_employee_id">
 		insert into es_employee(
 		es_employee_name,
 		es_employee_age,
 		es_employee_sex,
 		es_employee_img,
 		es_employee_idcard,
 		es_employee_marriage,
 		es_employee_qualification,
 		es_employee_school,
 		es_employee_major,
 		es_employee_department,
 		es_employee_post,
 		es_employee_entry,
 		es_employee_call,
 		es_employee_mail,
 		es_employee_bankcard,
 		es_employee_labourcard,
 		es_employee_pafcard,
 		es_employee_pod,
 		es_employee_domicile,
 		es_employee_motto,
 		es_employee_aim,
 		es_employee_qq,
 		es_employee_wechat,
 		es_employee_hobby,
 		es_employee_count,
 		es_employee_password
 		) values(
 		#{es_employee_name},
 		#{es_employee_age},
 		#{es_employee_sex},
 		#{es_employee_img},
 		#{es_employee_idcard},
 		#{es_employee_marriage},
 		#{es_employee_qualification},
 		#{es_employee_school},
 		#{es_employee_major},
 		#{es_employee_department},
 		#{es_employee_post},
 		#{es_employee_entry},
 		#{es_employee_call},
 		#{es_employee_mail},
 		#{es_employee_bankcard},
 		#{es_employee_labourcard},
 		#{es_employee_pafcard},
 		#{es_employee_pod},
 		#{es_employee_domicile},
 		#{es_employee_motto},
 		#{es_employee_aim},
 		#{es_employee_qq},
 		#{es_employee_wechat},
 		#{es_employee_hobby},
 		#{es_employee_count},
 		#{es_employee_password}
 		)
 		<selectKey keyProperty="es_employee_id" resultType="int">   
              select LAST_INSERT_ID()   
        </selectKey>  
 	</insert>
 	<!--这里可以获得刚插入表格的id，为后面Contact的插入提供了es_employee_id字段-->  
    <select id="selectLastId" parameterType="String" resultType="int">  
         select es_employee_id from es_employee where es_employee_idcard = #{es_employee_idcard}
    </select> 
 	<!--管理员添加员工紧急联系人-->
 	<insert id="managerAddContacts" parameterType="java.util.ArrayList">
 		insert into es_employee_contacts(
 		es_employee_contacts_name,
 		es_employee_contacts_relation,
 		es_employee_contacts_call,
 		es_employee_id
 		) values
 		<foreach collection="list" item="item" index="index" separator="," >  
        (#{item.es_employee_contacts_name},
 		#{item.es_employee_contacts_relation},
 		#{item.es_employee_contacts_call},
 		#{item.es_employee_id})
    	</foreach> 
 	</insert>
 	<!--分页查询，暂时不做分页-->
 	<!--返回员工信息反馈表的指定区间的数据-->
 	<select id="admGetFeedback" parameterType="int" resultType="FeedbackPo">
    	select * from es_employee_feedback limit #{pageNow},#{pageSize} 
    	where es_employee_feedback_state=0
    </select>
 	<!--返回员工信息反馈表的所有数据的总数量-->
 	 <select id="admGetFeedbackCount" resultType="int">
 		select count(*) from es_employee_feedback
 	</select>
 	
 	 <!--返回员工信息反馈表的指定区间的数据,没有考虑分页-->
 	<select id="admGetFeedbackList" resultType="FeedbackPo">
    	select * from es_employee_feedback 
    	where es_employee_feedback_state=0
    </select>
 	<!--修改员工信息反馈表的数据状态-->
 	 <update id="updateFeedbackState" parameterType="int">
 		update es_employee_feedback set es_employee_feedback_state=1 
 		where es_employee_feedback_id=#{es_employee_feedback_id}
 	</update>
 	
 	<!-- 得到数据表里面总的数据条数 -->
 	<select id="admGetEmployeeCount" resultType="int">
 		select count(*) from es_employee
 	</select>
 	<!--得到指定区间的员工-->
 	<select id="admGetEmployeeList" resultType="EmployeePo">
 		select * from es_employee limit #{pageNow},#{pageSize}
 	</select>
 	<!--按照员工id查询得到指定员工-->
 	<select id="admGetEmployeeById" parameterType="int" resultType="EmployeePo">
 		select * from es_employee where es_employee_id=#{es_employee_id} 
 		limit #{pageNow},#{pageSize}
 	</select>
 	<!-- 得到数据表里面总的数据条数,通过id -->
 	<select id="admGetEmployeeCountById" parameterType="int" resultType="int">
 		select count(*) from es_employee where es_employee_id=#{es_employee_id} 
 	</select>
 	<!--按照员工名字模糊查询，尽量使用#，少使用$，防止SQL注入-->
 	 <select id="admGetEmployeeByName" resultType="EmployeePo">
 		select * from es_employee where es_employee_name 
 		LIKE CONCAT(CONCAT('%', #{es_employee_name}), '%') 
 		limit #{pageNow},#{pageSize}
 		
 	</select>
 	<!-- 得到数据表里面总的数据条数，通过name -->
 	<select id="admGetEmployeeCountByName" parameterType="String" resultType="int">
 		select count(*) from es_employee where es_employee_name LIKE CONCAT(CONCAT('%', #{es_employee_name}), '%')
 	</select>
 	 <!--按照员工部门查询得到指定员工-->
 	<select id="admGetEmployeeByDepartment" resultType="EmployeePo">
 		select * from es_employee where es_employee_department=#{es_employee_department} 
 		limit #{pageNow},#{pageSize}
 	</select>
 	<!-- 得到数据表里面指定部门总的数据条数,通过指定部门 -->
 	<select id="admGetEmployeeCountByDepartment" parameterType="String" resultType="int">
 		select count(*) from es_employee where es_employee_department=#{es_employee_department} 
 	</select>
 	<!--更具id删除指定的员工，由于外键是联级关系，所以删除员工时候该员工的相关信息也会被删除-->
 	<delete id="deleteEmployeeById" parameterType="int">
 		delete from es_employee where es_employee_id=#{es_employee_id}
 	</delete>
 	<!--更具id查询指定员工的信息-->
 	<select id="selectEmployeeById" parameterType="int" resultMap="Employee_ResultMap">
 		select es_employee.*,es_employee_contacts.* 
 		from es_employee left join es_employee_contacts 
 		on 
 		es_employee.es_employee_id=es_employee_contacts.es_employee_id 
 		where 
 		es_employee.es_employee_id = #{es_employee_id}
 	</select>
 	<!--更具id更新员工-->
 	<update id="updateEmployeeById" parameterType="EmployeePo">
 		update es_employee es
 		set es.es_employee_name=#{es_employee_name},
 		es.es_employee_age=#{es_employee_age},
 		es.es_employee_sex=#{es_employee_sex},
 		es.es_employee_idcard=#{es_employee_idcard},
 		es.es_employee_marriage=#{es_employee_marriage},
 		es.es_employee_qualification=#{es_employee_qualification},
 		es.es_employee_school=#{es_employee_school},
 		es.es_employee_major=#{es_employee_major},
 		es.es_employee_department=#{es_employee_department},
 		es.es_employee_post=#{es_employee_post},
 		es.es_employee_entry=#{es_employee_entry},
 		es.es_employee_call=#{es_employee_call},
 		es.es_employee_mail=#{es_employee_mail},
 		es.es_employee_bankcard=#{es_employee_bankcard},
 		es.es_employee_labourcard=#{es_employee_labourcard},
 		es.es_employee_pafcard=#{es_employee_pafcard},
 		es.es_employee_pod=#{es_employee_pod},
 		es.es_employee_domicile=#{es_employee_domicile},
 		es.es_employee_motto=#{es_employee_motto},
 		es.es_employee_aim=#{es_employee_aim},
 		es.es_employee_qq=#{es_employee_qq},
 		es.es_employee_wechat=#{es_employee_wechat},
 		es.es_employee_hobby=#{es_employee_hobby},
 		es.es_employee_count=#{es_employee_count},
 		es.es_employee_password=#{es_employee_password} 
 		where es.es_employee_id=#{es_employee_id}
 	</update>
	<!--=================批量修改 信息，有点问题，用下面的方法，先删除在插入-->
	<!--更具紧急联系人电话号码获取表id-->
 	<select id="selectIdByConCall" parameterType="String" resultType="int">
 		select es_employee_contacts_id from es_employee_contacts where 
 		es_employee_contacts_call=#{es_employee_contacts_call}
 	</select>
 	<!--更新员工紧急联系人信息-->
 	<update id="updateContacts" parameterType="java.util.ArrayList">
 		<foreach collection="list" item="item" separator=";" >
 		update es_employee_contacts 
        set es_employee_contacts_name=#{item.es_employee_contacts_name},
 		es_employee_contacts_relation=#{item.es_employee_contacts_relation},
 		es_employee_contacts_call=#{item.es_employee_contacts_call} 
 		where es_employee_contacts_id=#{item.es_employee_contacts_id}
    	</foreach> 
 	</update>
	<!--==============================-->
 	<!--==================================下面这个解决员工紧急联系人的修改方式是先删除在插入新的，不太好
 	（现在修改为直接更具id更新）-->
 	<!--更具员工id删除指定员工紧急联系人-->
 	<delete id="deleteContactsByEmployeeId" parameterType="int">
 		delete from es_employee_contacts where es_employee_id=#{es_employee_id}
 	</delete>
 	<!--更具员工id，重新插入员工紧急联系人-->
 	<insert id="reInsertContacts" parameterType="java.util.ArrayList">
 		insert into es_employee_contacts(
 		es_employee_contacts_name,
 		es_employee_contacts_relation,
 		es_employee_contacts_call,
 		es_employee_id
 		) values
 		<foreach collection="list" item="item" index="index" separator="," >  
        (#{item.es_employee_contacts_name},
 		#{item.es_employee_contacts_relation},
 		#{item.es_employee_contacts_call},
 		#{item.es_employee_id})
    	</foreach> 
 	</insert>
 	<!--=============下面是后台数据库可视化数据展示部门==========================-->
 	<!--获取员工总人数-->
 	<select id="getEmployeeAllCount" resultType="int">
 		select count(*) from es_employee
 	</select>
 	<!--获取男性数量-->
 	<select id="getManCount" resultType="int">
 		select count(*) from es_employee where es_employee_sex='男'
 	</select>
 	<!--获取女性数量-->
 	<select id="getWomanCount" resultType="int">
 		select count(*) from es_employee where es_employee_sex='女'
 	</select>
 	<!--获取年龄在18-22岁的人-->
 	<select id="getAgeOne" resultType="int">
 		<![CDATA[
 	select count(*) from es_employee where es_employee_age>17 and es_employee_age<23
          ]]>
 	</select>
 	 <!--获取年龄在23-27岁的人-->
 	<select id="getAgeTwo" resultType="int">
 		<![CDATA[
 	select count(*) from es_employee where es_employee_age>22 and es_employee_age<28
          ]]>
 	</select>
 	 <!--获取年龄在28-32岁的人-->
 	<select id="getAgeThree" resultType="int">
 		<![CDATA[
 	select count(*) from es_employee where es_employee_age>27 and es_employee_age<33
          ]]>
 	</select>
 	 <!--获取年龄在33-37岁的人-->
 	<select id="getAgeFour" resultType="int">
 		<![CDATA[
 	select count(*) from es_employee where es_employee_age>32 and es_employee_age<38
          ]]>
 	</select>
 	 <!--获取年龄在38-42岁的人-->
 	<select id="getAgeFive" resultType="int">
 		<![CDATA[
 	select count(*) from es_employee where es_employee_age>37 and es_employee_age<43
          ]]>
 	</select>
 	 <!--获取年龄在大于42岁的人-->
 	<select id="getAgeSix" resultType="int">
 		<![CDATA[
 	select count(*) from es_employee where es_employee_age>42
          ]]>
 	</select>
 	<!--获取学历为初中的员工数量-->
 	 <select id="getQualificationOne" resultType="int">
 		<![CDATA[
 	select count(*) from es_employee where es_employee_qualification='初中生'
          ]]>
 	</select>
 	 <!--获取学历为高中的员工数量-->
 	 <select id="getQualificationTwo" resultType="int">
 		<![CDATA[
 	select count(*) from es_employee where es_employee_qualification='高中生'
          ]]>
 	</select>
 	 <!--获取学历为专科的员工数量-->
 	 <select id="getQualificationThree" resultType="int">
 		<![CDATA[
 	select count(*) from es_employee where es_employee_qualification='专科生'
          ]]>
 	</select>
 	 <!--获取学历为本科的员工数量-->
 	 <select id="getQualificationFour" resultType="int">
 		<![CDATA[
 	select count(*) from es_employee where es_employee_qualification='本科生'
          ]]>
 	</select>
 	 <!--获取学历为硕士的员工数量-->
 	 <select id="getQualificationFive" resultType="int">
 		<![CDATA[
 	select count(*) from es_employee where es_employee_qualification='研究生'
          ]]>
 	</select>
 	 <!--获取学历为博士的员工数量-->
 	 <select id="getQualificationSix" resultType="int">
 		<![CDATA[
 	select count(*) from es_employee where es_employee_qualification='博士生'
          ]]>
 	</select>
 	<!--=======================================-->
</mapper>